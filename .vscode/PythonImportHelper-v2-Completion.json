[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "LLMExtractionStrategy",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CrawlerRunConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CacheMode",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "models.crawl_venue.venue",
        "description": "models.crawl_venue.venue",
        "isExtraImport": true,
        "detail": "models.crawl_venue.venue",
        "documentation": {}
    },
    {
        "label": "is_complete_venue",
        "importPath": "utils.data_utils",
        "description": "utils.data_utils",
        "isExtraImport": true,
        "detail": "utils.data_utils",
        "documentation": {}
    },
    {
        "label": "is_duplicate_venue",
        "importPath": "utils.data_utils",
        "description": "utils.data_utils",
        "isExtraImport": true,
        "detail": "utils.data_utils",
        "documentation": {}
    },
    {
        "label": "save_venues_to_xlsx",
        "importPath": "utils.data_utils",
        "description": "utils.data_utils",
        "isExtraImport": true,
        "detail": "utils.data_utils",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "get_browser_config",
        "importPath": "utils.scraper_utils",
        "description": "utils.scraper_utils",
        "isExtraImport": true,
        "detail": "utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "fetch_and_process_venue_page",
        "importPath": "utils.scraper_utils",
        "description": "utils.scraper_utils",
        "isExtraImport": true,
        "detail": "utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "get_llm_strategy_for_venue",
        "importPath": "utils.scraper_utils",
        "description": "utils.scraper_utils",
        "isExtraImport": true,
        "detail": "utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "VENUE_BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "VENUE_CSS_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "REQUIRED_KEYS",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "Venue",
        "kind": 6,
        "importPath": "projects.lead_generation.models.crawl_venue.venue",
        "description": "projects.lead_generation.models.crawl_venue.venue",
        "peekOfCode": "class Venue(BaseModel):\n    \"\"\"\n    Represents a venue data structure/shape\n    \"\"\"\n    name: str\n    location: str\n    price: str\n    capacity: str\n    rating: float\n    reviews: int",
        "detail": "projects.lead_generation.models.crawl_venue.venue",
        "documentation": {}
    },
    {
        "label": "is_duplicate_venue",
        "kind": 2,
        "importPath": "projects.lead_generation.utils.data_utils",
        "description": "projects.lead_generation.utils.data_utils",
        "peekOfCode": "def is_duplicate_venue(venue_name: str, seen_names: set) -> bool:\n    return venue_name in seen_names\ndef is_complete_venue(venue: dict, required_keys: list) -> bool:\n    return all(key in venue for key in required_keys)\ndef save_venues_to_xlsx(venues: list, filename: str):\n    if not venues:\n        print(\"No venues to save.\")\n        return\n    if not filename.endswith(\".xlsx\"):\n        filename += \".xlsx\"",
        "detail": "projects.lead_generation.utils.data_utils",
        "documentation": {}
    },
    {
        "label": "is_complete_venue",
        "kind": 2,
        "importPath": "projects.lead_generation.utils.data_utils",
        "description": "projects.lead_generation.utils.data_utils",
        "peekOfCode": "def is_complete_venue(venue: dict, required_keys: list) -> bool:\n    return all(key in venue for key in required_keys)\ndef save_venues_to_xlsx(venues: list, filename: str):\n    if not venues:\n        print(\"No venues to save.\")\n        return\n    if not filename.endswith(\".xlsx\"):\n        filename += \".xlsx\"\n    import pandas as pd\n    df = pd.DataFrame(venues)",
        "detail": "projects.lead_generation.utils.data_utils",
        "documentation": {}
    },
    {
        "label": "save_venues_to_xlsx",
        "kind": 2,
        "importPath": "projects.lead_generation.utils.data_utils",
        "description": "projects.lead_generation.utils.data_utils",
        "peekOfCode": "def save_venues_to_xlsx(venues: list, filename: str):\n    if not venues:\n        print(\"No venues to save.\")\n        return\n    if not filename.endswith(\".xlsx\"):\n        filename += \".xlsx\"\n    import pandas as pd\n    df = pd.DataFrame(venues)\n    df.to_excel(filename, index=False)\n    print(f\"Saved {len(venues)} venues to '{filename}'.\")",
        "detail": "projects.lead_generation.utils.data_utils",
        "documentation": {}
    },
    {
        "label": "get_browser_config",
        "kind": 2,
        "importPath": "projects.lead_generation.utils.scraper_utils",
        "description": "projects.lead_generation.utils.scraper_utils",
        "peekOfCode": "def get_browser_config() -> BrowserConfig:\n    \"\"\"\n    Returns a BrowserConfig object with default settings.\n    \"\"\"\n    browser_config = BrowserConfig(\n        browser_type=\"chromium\",\n        headless=False,\n        verbose=False,\n        viewport_height=1080,\n        viewport_width=1080,",
        "detail": "projects.lead_generation.utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "get_llm_strategy_for_venue",
        "kind": 2,
        "importPath": "projects.lead_generation.utils.scraper_utils",
        "description": "projects.lead_generation.utils.scraper_utils",
        "peekOfCode": "def get_llm_strategy_for_venue() -> LLMExtractionStrategy:\n    \"\"\"\n    Returns a LLMExtractionStrategy object for venue data.\n    \"\"\"\n    llm_strategy = LLMExtractionStrategy(\n        provider=\"groq/deepseek-r1-distill-llama-70b\",\n        api_token=\"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\",\n        chunk_token_threshold=1000,\n        schema=Venue.model_json_schema(),\n        instruction=(",
        "detail": "projects.lead_generation.utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "ENV_TYPE",
        "kind": 5,
        "importPath": "projects.lead_generation.utils.scraper_utils",
        "description": "projects.lead_generation.utils.scraper_utils",
        "peekOfCode": "ENV_TYPE = os.getenv(\"ENV_TYPE\")\ndef get_browser_config() -> BrowserConfig:\n    \"\"\"\n    Returns a BrowserConfig object with default settings.\n    \"\"\"\n    browser_config = BrowserConfig(\n        browser_type=\"chromium\",\n        headless=False,\n        verbose=False,\n        viewport_height=1080,",
        "detail": "projects.lead_generation.utils.scraper_utils",
        "documentation": {}
    },
    {
        "label": "VENUE_BASE_URL",
        "kind": 5,
        "importPath": "projects.lead_generation.config",
        "description": "projects.lead_generation.config",
        "peekOfCode": "VENUE_BASE_URL = \"https://www.theknot.com/marketplace/wedding-videographers-new-york-ny\"\nVENUE_CSS_SELECTOR = \"[class^='info-container']\"\nREQUIRED_KEYS = [\n    \"name\",\n    \"price\",\n    \"location\",\n    \"capacity\",\n    \"rating\",\n    \"reviews\",\n    \"description\",",
        "detail": "projects.lead_generation.config",
        "documentation": {}
    },
    {
        "label": "VENUE_CSS_SELECTOR",
        "kind": 5,
        "importPath": "projects.lead_generation.config",
        "description": "projects.lead_generation.config",
        "peekOfCode": "VENUE_CSS_SELECTOR = \"[class^='info-container']\"\nREQUIRED_KEYS = [\n    \"name\",\n    \"price\",\n    \"location\",\n    \"capacity\",\n    \"rating\",\n    \"reviews\",\n    \"description\",\n]",
        "detail": "projects.lead_generation.config",
        "documentation": {}
    },
    {
        "label": "REQUIRED_KEYS",
        "kind": 5,
        "importPath": "projects.lead_generation.config",
        "description": "projects.lead_generation.config",
        "peekOfCode": "REQUIRED_KEYS = [\n    \"name\",\n    \"price\",\n    \"location\",\n    \"capacity\",\n    \"rating\",\n    \"reviews\",\n    \"description\",\n]",
        "detail": "projects.lead_generation.config",
        "documentation": {}
    },
    {
        "label": "alarm_clock",
        "kind": 2,
        "importPath": "python.alaram_clock",
        "description": "python.alaram_clock",
        "peekOfCode": "def alarm_clock(ringtone_path=RINGTONE_PATHS[\"default\"], alarm_clock_timer_min=1):\n    \"\"\"Play a sound and set an alarm clock.\"\"\"\n    print(\n        f\"Alarm clock is set for {alarm_clock_timer_min * 60} seconds\"\n        if alarm_clock_timer_min < 1\n        else f\"{alarm_clock_timer_min} minutes.\"\n    )\n    time_in_seconds = alarm_clock_timer_min * 60\n    timer = 0\n    while timer < time_in_seconds:",
        "detail": "python.alaram_clock",
        "documentation": {}
    },
    {
        "label": "RINGTONE_PATHS",
        "kind": 5,
        "importPath": "python.alaram_clock",
        "description": "python.alaram_clock",
        "peekOfCode": "RINGTONE_PATHS = {\n    \"default\": \"/Users/arunkumar/learning-ai/python/wind_up_alaram.mp3\",\n    \"wind_up_alaram\": \"/Users/arunkumar/learning-ai/python/wind_up_alaram.mp3\",\n}\nCLEAR = \" \\033[2J\"\nCLEAR_AND_RETURN = \"\\033[H\"\ndef alarm_clock(ringtone_path=RINGTONE_PATHS[\"default\"], alarm_clock_timer_min=1):\n    \"\"\"Play a sound and set an alarm clock.\"\"\"\n    print(\n        f\"Alarm clock is set for {alarm_clock_timer_min * 60} seconds\"",
        "detail": "python.alaram_clock",
        "documentation": {}
    },
    {
        "label": "CLEAR",
        "kind": 5,
        "importPath": "python.alaram_clock",
        "description": "python.alaram_clock",
        "peekOfCode": "CLEAR = \" \\033[2J\"\nCLEAR_AND_RETURN = \"\\033[H\"\ndef alarm_clock(ringtone_path=RINGTONE_PATHS[\"default\"], alarm_clock_timer_min=1):\n    \"\"\"Play a sound and set an alarm clock.\"\"\"\n    print(\n        f\"Alarm clock is set for {alarm_clock_timer_min * 60} seconds\"\n        if alarm_clock_timer_min < 1\n        else f\"{alarm_clock_timer_min} minutes.\"\n    )\n    time_in_seconds = alarm_clock_timer_min * 60",
        "detail": "python.alaram_clock",
        "documentation": {}
    },
    {
        "label": "CLEAR_AND_RETURN",
        "kind": 5,
        "importPath": "python.alaram_clock",
        "description": "python.alaram_clock",
        "peekOfCode": "CLEAR_AND_RETURN = \"\\033[H\"\ndef alarm_clock(ringtone_path=RINGTONE_PATHS[\"default\"], alarm_clock_timer_min=1):\n    \"\"\"Play a sound and set an alarm clock.\"\"\"\n    print(\n        f\"Alarm clock is set for {alarm_clock_timer_min * 60} seconds\"\n        if alarm_clock_timer_min < 1\n        else f\"{alarm_clock_timer_min} minutes.\"\n    )\n    time_in_seconds = alarm_clock_timer_min * 60\n    timer = 0",
        "detail": "python.alaram_clock",
        "documentation": {}
    },
    {
        "label": "generate_random_password",
        "kind": 2,
        "importPath": "python.password_generator",
        "description": "python.password_generator",
        "peekOfCode": "def generate_random_password(minLen=8, maxLen=16, digits=True, specialChars=True, lowercase=True, uppercase=True):\n    \"\"\"Generate a random password.\"\"\"\n    if(minLen>maxLen):\n        raise ValueError(\"Minimum length cannot be greater than maximum length.\")\n    if(not digits and not specialChars and not lowercase and not uppercase):\n        raise ValueError(\"At least one criteria should be enabled for password generation.\")\n    length = random.randint(minLen, maxLen)\n    password = []\n    if digits:\n        password.append(random.choice(digits_set))",
        "detail": "python.password_generator",
        "documentation": {}
    },
    {
        "label": "check_password_strength",
        "kind": 2,
        "importPath": "python.password_generator",
        "description": "python.password_generator",
        "peekOfCode": "def check_password_strength(password):\n    \"\"\"Check the strength of the given password.\"\"\"\n    length_criteria = len(password) >= 8\n    digit_criteria = any(char in digits_set for char in password)\n    special_char_criteria = any(char in special_chars_set for char in password)\n    lowercase_criteria = any(char in lowercase_set for char in password)\n    uppercase_criteria = any(char in uppercase_set for char in password)\n    if all([length_criteria, digit_criteria, special_char_criteria, lowercase_criteria, uppercase_criteria]):\n        return \"Strong\"\n    elif length_criteria and (digit_criteria or special_char_criteria) and (lowercase_criteria or uppercase_criteria):",
        "detail": "python.password_generator",
        "documentation": {}
    },
    {
        "label": "lowercase_set",
        "kind": 5,
        "importPath": "python.password_generator",
        "description": "python.password_generator",
        "peekOfCode": "lowercase_set = string.ascii_lowercase \nuppercase_set = string.ascii_uppercase \ndef generate_random_password(minLen=8, maxLen=16, digits=True, specialChars=True, lowercase=True, uppercase=True):\n    \"\"\"Generate a random password.\"\"\"\n    if(minLen>maxLen):\n        raise ValueError(\"Minimum length cannot be greater than maximum length.\")\n    if(not digits and not specialChars and not lowercase and not uppercase):\n        raise ValueError(\"At least one criteria should be enabled for password generation.\")\n    length = random.randint(minLen, maxLen)\n    password = []",
        "detail": "python.password_generator",
        "documentation": {}
    },
    {
        "label": "uppercase_set",
        "kind": 5,
        "importPath": "python.password_generator",
        "description": "python.password_generator",
        "peekOfCode": "uppercase_set = string.ascii_uppercase \ndef generate_random_password(minLen=8, maxLen=16, digits=True, specialChars=True, lowercase=True, uppercase=True):\n    \"\"\"Generate a random password.\"\"\"\n    if(minLen>maxLen):\n        raise ValueError(\"Minimum length cannot be greater than maximum length.\")\n    if(not digits and not specialChars and not lowercase and not uppercase):\n        raise ValueError(\"At least one criteria should be enabled for password generation.\")\n    length = random.randint(minLen, maxLen)\n    password = []\n    if digits:",
        "detail": "python.password_generator",
        "documentation": {}
    }
]